package com.squaretrade.deploy.model

import java.util.regex.Matcher
import java.util.regex.Pattern

class TestGitTagFunction extends GroovyShellTestCase{

    Script stageEnv

    static String repoURL = 'git@github.squaretrade.com:devops/jenkins-pipeline-shared-lib-test.git'

    static String repoDir = '/tmp/jenkins-pipeline-shared-lib-test'

    @Override
    protected void setUp () {
        super.setUp()
        GroovyCodeSource gcs = new GroovyCodeSource(new File('vars/stageEnv.groovy'))
        stageEnv = shell.parse(gcs)

        new ProcessBuilder("git", "clone", "${repoURL}", "${repoDir}").start().waitFor()
    }

    @SuppressWarnings("GrMethodMayBeStatic")
    private ProcessBuilder getProcessBuilder(String... command) {
        return new ProcessBuilder(command).directory(new File(repoDir))
    }

    @SuppressWarnings("GrMethodMayBeStatic")
    private String getPushedTag() {
        Process subProcess = getProcessBuilder("git", "describe", "--abbrev=0").start()

        BufferedReader reader = new BufferedReader(new InputStreamReader(subProcess.getInputStream()))

        return reader.readLine().toString()
    }

    void testGitTag() {
        stageEnv.metaClass.sh { String command ->
            List<String> matchList = new ArrayList<String>()

            /*
            This regex is needed because ProcessBuilder expects a List<String> or String..., in our case the simplest
            way to generate the expected parameter for ProcessBuilder is splitting the string that is being passed to "sh" function
            performing a "command.split()", however our string contains a "git tag" command that needs a "-m" parameter,
            and the value for this parameter must be provided between quotes.

            Command string: "git tag -a ${tagName} -m \"Generated by Cloudbees ${getJobBaseName(jobName)} job: ${buildNumber}\""

            Using "command.split()" the returned List<String> is:
               command.split() e.g: ["git", "tag", "-a", "${tagName}", "-m", "\"Generated", "by", "Cloudbees", "${getJobBaseName(jobName)}", "job:", "${buildNumber}\""]
            Which causes a syntax error in the command returning a "fatal: too many params" error.

            Also, the use of a simple "command" returns another error: "git tag -a ... doesn't exist", because "comannd" is a simple String object, not the expected List<String>.

            To solve that I had to create this regex, which will split the given string by its whitespaces, ignoring anything between quotes, even if they are single quoted '', or double quoted "".

            Using the regex below, the returned List<String> will be:
                Regex return e.g: ["git", "tag", "-a", "${tagName}", "-m", "\"Generated by Cloudbees ${getJobBaseName(jobName)} job: ${buildNumber}\""]
            Which will return the correct syntax to execute the command.
            */
            Pattern regex = Pattern.compile("[^\\s\"']+|\"[^\"]*\"|'[^']*'")

            Matcher regexMatcher = regex.matcher(command)

            while (regexMatcher.find()) {
                matchList.add(regexMatcher.group())
            }

            ProcessBuilder gitTag = new ProcessBuilder(matchList).directory(new File(repoDir))

            gitTag.start().waitFor()
        }

        List args = ['testingTagCreation', 'folder/testJob', 20]

        stageEnv.invokeMethod('gitTag', args)

        String result = getPushedTag()

        assertEquals(args[0], result)

        getProcessBuilder("git", "tag", "-d", "${args[0]}").start().waitFor()
        getProcessBuilder("git", "push", "--delete", "origin", "${args[0]}").start().waitFor()

        "rm -rf ${repoDir}".execute()
    }
}